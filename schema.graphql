"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  title(locale: String): String
  description(locale: String): String
  contentType(locale: String): String
  fileName(locale: String): String
  size(locale: String): Int
  url(transform: ImageTransformOptions, locale: String): String
  width(locale: String): Int
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
}

type AssetCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Asset]!
}

input AssetFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  size_exists: Boolean
  size: Int
  size_not: Int
  size_in: [Int]
  size_not_in: [Int]
  size_gt: Int
  size_gte: Int
  size_lt: Int
  size_lte: Int
  contentType_exists: Boolean
  contentType: String
  contentType_not: String
  contentType_in: [String]
  contentType_not_in: [String]
  contentType_contains: String
  contentType_not_contains: String
  fileName_exists: Boolean
  fileName: String
  fileName_not: String
  fileName_in: [String]
  fileName_not_in: [String]
  fileName_contains: String
  fileName_not_contains: String
  width_exists: Boolean
  width: Int
  width_not: Int
  width_in: [Int]
  width_not_in: [Int]
  width_gt: Int
  width_gte: Int
  width_lt: Int
  width_lte: Int
  height_exists: Boolean
  height: Int
  height_not: Int
  height_in: [Int]
  height_not_in: [Int]
  height_gt: Int
  height_gte: Int
  height_lt: Int
  height_lte: Int
  OR: [AssetFilter]
  AND: [AssetFilter]
}

type AssetLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  illustrationsCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): IllustrationsCollection
  booksCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): BooksCollection
}

enum AssetOrder {
  url_ASC
  url_DESC
  size_ASC
  size_DESC
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/3j41pal4ffrc/content_types/books)
"""
type Books implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): BooksLinkingCollections
  buy(locale: String): String
  cover(preview: Boolean, locale: String): Asset
  description(locale: String): BooksDescription
  event(locale: String): String
  page(locale: String): Int
  plateType(locale: String): String
  price(locale: String): Int
  releaseDate(locale: String): DateTime
  samplePagesCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): AssetCollection
  slug(locale: String): String
  tag(locale: String): [String]
  title(locale: String): String
}

type BooksCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Books]!
}

type BooksDescription {
  json: JSON!
  links: BooksDescriptionLinks!
}

type BooksDescriptionAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type BooksDescriptionEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type BooksDescriptionLinks {
  entries: BooksDescriptionEntries!
  assets: BooksDescriptionAssets!
}

input BooksFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  buy_exists: Boolean
  buy: String
  buy_not: String
  buy_in: [String]
  buy_not_in: [String]
  buy_contains: String
  buy_not_contains: String
  cover_exists: Boolean
  description_exists: Boolean
  description_contains: String
  description_not_contains: String
  event_exists: Boolean
  event: String
  event_not: String
  event_in: [String]
  event_not_in: [String]
  event_contains: String
  event_not_contains: String
  page_exists: Boolean
  page: Int
  page_not: Int
  page_in: [Int]
  page_not_in: [Int]
  page_gt: Int
  page_gte: Int
  page_lt: Int
  page_lte: Int
  plateType_exists: Boolean
  plateType: String
  plateType_not: String
  plateType_in: [String]
  plateType_not_in: [String]
  plateType_contains: String
  plateType_not_contains: String
  price_exists: Boolean
  price: Int
  price_not: Int
  price_in: [Int]
  price_not_in: [Int]
  price_gt: Int
  price_gte: Int
  price_lt: Int
  price_lte: Int
  releaseDate_exists: Boolean
  releaseDate: DateTime
  releaseDate_not: DateTime
  releaseDate_in: [DateTime]
  releaseDate_not_in: [DateTime]
  releaseDate_gt: DateTime
  releaseDate_gte: DateTime
  releaseDate_lt: DateTime
  releaseDate_lte: DateTime
  samplePagesCollection_exists: Boolean
  slug_exists: Boolean
  slug: String
  slug_not: String
  slug_in: [String]
  slug_not_in: [String]
  slug_contains: String
  slug_not_contains: String
  tag_exists: Boolean
  tag_contains_all: [String]
  tag_contains_some: [String]
  tag_contains_none: [String]
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  OR: [BooksFilter]
  AND: [BooksFilter]
}

type BooksLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

enum BooksOrder {
  buy_ASC
  buy_DESC
  event_ASC
  event_DESC
  page_ASC
  page_DESC
  plateType_ASC
  plateType_DESC
  price_ASC
  price_DESC
  releaseDate_ASC
  releaseDate_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags_exists: Boolean
  tags: ContentfulMetadataTagsFilter
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_some: [String]
  id_contains_none: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
}

type EntryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

input EntryFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  OR: [EntryFilter]
  AND: [EntryFilter]
}

enum EntryOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

"""
[See type definition](https://app.contentful.com/spaces/3j41pal4ffrc/content_types/illustrations)
"""
type Illustrations implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): IllustrationsLinkingCollections
  createDate(locale: String): DateTime
  image(preview: Boolean, locale: String): Asset
  opusNo(locale: String): Int
  title(locale: String): String
  tag(locale: String): [String]
  listed(locale: String): Boolean
}

type IllustrationsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Illustrations]!
}

input IllustrationsFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  createDate_exists: Boolean
  createDate: DateTime
  createDate_not: DateTime
  createDate_in: [DateTime]
  createDate_not_in: [DateTime]
  createDate_gt: DateTime
  createDate_gte: DateTime
  createDate_lt: DateTime
  createDate_lte: DateTime
  image_exists: Boolean
  opusNo_exists: Boolean
  opusNo: Int
  opusNo_not: Int
  opusNo_in: [Int]
  opusNo_not_in: [Int]
  opusNo_gt: Int
  opusNo_gte: Int
  opusNo_lt: Int
  opusNo_lte: Int
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  tag_exists: Boolean
  tag_contains_all: [String]
  tag_contains_some: [String]
  tag_contains_none: [String]
  listed_exists: Boolean
  listed: Boolean
  listed_not: Boolean
  OR: [IllustrationsFilter]
  AND: [IllustrationsFilter]
}

type IllustrationsLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

enum IllustrationsOrder {
  createDate_ASC
  createDate_DESC
  opusNo_ASC
  opusNo_DESC
  title_ASC
  title_DESC
  listed_ASC
  listed_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum ImageFormat {
  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
  AVIF
}

enum ImageResizeFocus {
  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top right."""
  TOP_RIGHT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES
}

enum ImageResizeStrategy {
  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  asset(id: String!, preview: Boolean, locale: String): Asset
  assetCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: AssetFilter, order: [AssetOrder]): AssetCollection
  illustrations(id: String!, preview: Boolean, locale: String): Illustrations
  illustrationsCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: IllustrationsFilter, order: [IllustrationsOrder]): IllustrationsCollection
  books(id: String!, preview: Boolean, locale: String): Books
  booksCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: BooksFilter, order: [BooksOrder]): BooksCollection
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: EntryFilter, order: [EntryOrder]): EntryCollection
}

type Sys {
  id: String!
  spaceId: String!
  environmentId: String!
  publishedAt: DateTime
  firstPublishedAt: DateTime
  publishedVersion: Int
}

input SysFilter {
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  publishedAt_exists: Boolean
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime]
  publishedAt_not_in: [DateTime]
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_not_in: [DateTime]
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  publishedVersion_exists: Boolean
  publishedVersion: Float
  publishedVersion_not: Float
  publishedVersion_in: [Float]
  publishedVersion_not_in: [Float]
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_lt: Float
  publishedVersion_lte: Float
}

